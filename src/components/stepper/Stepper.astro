---
import ReservationForm from "../reservationForm/ReservationForm.astro";
import SeatsSelection from "../seatsSelection/SeatsSelection.astro";
---

<section class="stepper-section-container">
  <h3 class="form-title">Make Your Reservation</h3>

  <div class="stepper-container">
    <div class="stepper-item stepper-item-active">
      <div class="stepper-line"></div>
      <div class="stepper-title">Travel info</div>
    </div>

    <div class="stepper-item">
      <div class="stepper-line"></div>
      <div class="stepper-title">Seat selection</div>
    </div>
  </div>

  <div class="step-content step-1 step-active">
    <ReservationForm />
  </div>
  <div class="step-content step-2">
    <SeatsSelection />
  </div>
</section>

<script>
  import Toastify from "toastify-js";
  import "toastify-js/src/toastify.css";

  const steps = document.querySelectorAll(".step-content");
  const stepperItems = document.querySelectorAll(".stepper-item");
  const backButton = document.getElementById("back-step-button");
  const travelInfoForm = document.getElementById("travel-info-form");
  const seatsSelectionForm = document.getElementById("seats-selection-form");
  const sendingLoaderContainer = document.querySelector(
    ".sending-loader-container",
  );

  let currentStep = getStepQueryParams();
  changeStep(currentStep);

  travelInfoForm?.addEventListener("submit", (event) => {
    event.preventDefault();
    const target = event.target as HTMLFormElement;
    const isValid = target.checkValidity();

    if (isValid) {
      const formData = new FormData(target);

      const data = {
        name: formData.get("name") as string,
        reservationDate: formData.get("reservation-date") as string,
        travelFrom: formData.get("travel-from") as string,
        travelTo: formData.get("travel-to") as string,
      };

      sessionStorage.setItem("name", data.name);
      sessionStorage.setItem("reservationDate", data.reservationDate);
      sessionStorage.setItem("travelFrom", data.travelFrom);
      sessionStorage.setItem("travelTo", data.travelTo);

      nextStep();
    }
  });

  seatsSelectionForm?.addEventListener("submit", (event) => {
    event.preventDefault();
    const target = event.target as HTMLFormElement;
    const isValid = target.checkValidity();

    if (isValid) {
      const formData = new FormData(target);

      const seatSelected = formData.get("seat");
      const name = sessionStorage.getItem("name");
      const reservationDate = sessionStorage.getItem("reservationDate");
      const travelFrom = sessionStorage.getItem("travelFrom");
      const travelTo = sessionStorage.getItem("travelTo");

      if (name && reservationDate && seatSelected && travelFrom && travelTo) {
        sendingLoaderContainer?.classList.add("sending-loader-active");
        const parsedDate = new Date(reservationDate).getTime();

        const data = {
          name,
          reservationDate: parsedDate,
          seatCode: seatSelected,
          travelFrom,
          travelTo,
        };

        fetch(`${import.meta.env.PUBLIC_API_URL}/tickets`, {
          method: "POST",
          body: JSON.stringify(data),
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((response) => {
            if (!response.ok) throw new Error("Something went wrong");
            return response.json();
          })
          .then((response) => {
            console.log(response.id);
            Toastify({
              text: "Ticket created successfully. Click here to view your ticket.",
              destination: "/reservations/" + response.id,
              close: true,
              gravity: "bottom",
              position: "center",
              style: {
                background: "none",
                backgroundColor: "var(--success)",
                margin: "0 1rem",
              },
              duration: 3000,
            }).showToast();
          })
          .catch(() => {
            Toastify({
              text: "Ticket couldn't be created",
              close: true,
              gravity: "bottom",
              position: "center",
              style: {
                background: "none",
                backgroundColor: "var(--error)",
                margin: "0 1rem",
              },
              duration: 3000,
            }).showToast();
          })
          .finally(() => {
            sendingLoaderContainer?.classList.remove("sending-loader-active");
          });
      }
    }
  });

  backButton?.addEventListener("click", () => {
    prevStep();
  });

  function getStepQueryParams() {
    const queryParams = new URLSearchParams(window.location.search);
    const currentStepQuery = queryParams.get("step");
    return currentStepQuery ? Number(currentStepQuery) : 1;
  }

  function changeStep(currentStep: number) {
    steps.forEach((step, index) => {
      if (index === currentStep - 1) {
        step.classList.add("step-active");
        stepperItems[index].classList.add("stepper-item-active");
      } else {
        step.classList.remove("step-active");
        stepperItems[index].classList.remove("stepper-item-active");
      }
    });

    history.replaceState(
      { step: currentStep },
      `step-${currentStep}`,
      window.location.pathname + `?step=${currentStep}`,
    );
  }

  function nextStep() {
    if (currentStep === 2) return;
    currentStep++;
    changeStep(currentStep);
  }

  function prevStep() {
    if (currentStep === 1) return;
    currentStep--;
    changeStep(currentStep);
  }
</script>

<style>
  .stepper-section-container {
    flex: 1;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .form-title {
    font-size: 1.25rem;
    font-weight: 500;
  }
  .stepper-container {
    color: var(--white);
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 0.5rem;
    width: 100%;
  }

  .stepper-item {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    color: var(--black-50);
  }

  .stepper-line {
    width: 100%;
    height: 2px;
    border-radius: 2rem;
    background-color: currentColor;
  }

  .stepper-item-active {
    color: var(--black);
  }

  .step-content {
    display: none;
    align-self: center;
    width: 100%;
  }

  .step-active {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .buttons-container {
    display: flex;
    gap: 2rem;
    justify-content: center;
  }

  .button {
    border: 1px solid var(--black-50);
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    color: var(--white);
    border-radius: 2rem;
    width: fit-content;
    text-align: center;
    font-size: 1rem;
  }

  .button-primary {
    background-color: var(--white);
    color: var(--black);
    font-weight: 500;
    border: none;
  }

  .toast-error {
    background-color: red;
  }

  @media screen and (min-width: 1024px) {
    .stepper-section-container {
      padding: 2rem 0;
    }
  }
</style>
